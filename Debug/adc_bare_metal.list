
adc_bare_metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800063c  08000644  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  24000000  08000644  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000028  08000644  00020028  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY
  9 .debug_info   000008c5  00000000  00000000  00010672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000019d  00000000  00000000  00010f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000068  00000000  00000000  000110d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000050  00000000  00000000  00011140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020ef3  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000005c7  00000000  00000000  00032083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c027b  00000000  00000000  0003264a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000f28c5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000dc  00000000  00000000  000f2918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000000 	.word	0x24000000
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08000624 	.word	0x08000624

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000004 	.word	0x24000004
 80002e8:	08000624 	.word	0x08000624

080002ec <clock_init>:
// analog pin pa3->ahb1->adc_12_inp15;
//PA0->ADC1_INP16,
#define eoc (1ul<<2);
uint32_t sensor;
uint32_t x;
void clock_init(void){
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	//RCC->CR|=RCC_CR_HSI48ON;
		//hse on and wait for it to satabilize;
		//hse 24mhz;

		RCC->CR|=RCC_CR_HSEON; //
 80002f0:	4b37      	ldr	r3, [pc, #220]	; (80003d0 <clock_init+0xe4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a36      	ldr	r2, [pc, #216]	; (80003d0 <clock_init+0xe4>)
 80002f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002fa:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<17))){
 80002fc:	bf00      	nop
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <clock_init+0xe4>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <clock_init+0x12>
		}

		//pll mux  hse clock is selected.
		RCC->PLLCKSELR|=(2ul<<0);
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <clock_init+0xe4>)
 800030c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030e:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <clock_init+0xe4>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	6293      	str	r3, [r2, #40]	; 0x28
		//pll 1 is  getting 8mhz
		RCC->PLLCKSELR|=(3ul<<4);
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <clock_init+0xe4>)
 8000318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800031a:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <clock_init+0xe4>)
 800031c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000320:	6293      	str	r3, [r2, #40]	; 0x28
		//pll 2,3 is getting 12mHz
		RCC->PLLCKSELR|=(2ul<<12); // pll 2
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <clock_init+0xe4>)
 8000324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000326:	4a2a      	ldr	r2, [pc, #168]	; (80003d0 <clock_init+0xe4>)
 8000328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032c:	6293      	str	r3, [r2, #40]	; 0x28
		//RCC->PLLCKSELR|=(2ul<<20); //pll 3
		//pll1_p_ck for sys_ck, pll1_r_ck for traceportc
		RCC->PLL1DIVR|=(69ul<<0); // mul by 70; pll1= 420Mhz;
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <clock_init+0xe4>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a27      	ldr	r2, [pc, #156]	; (80003d0 <clock_init+0xe4>)
 8000334:	f043 0345 	orr.w	r3, r3, #69	; 0x45
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->PLL1DIVR|=(1ul<<24); // pll1_r_clk =240mhz;
 800033a:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <clock_init+0xe4>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <clock_init+0xe4>)
 8000340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->PLL1DIVR|=1ul<<9; //pll1_p_clk =240mhz;
 8000346:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <clock_init+0xe4>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a21      	ldr	r2, [pc, #132]	; (80003d0 <clock_init+0xe4>)
 800034c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->PLL1DIVR|=1ul<<16; // pll1_q_clk=240mhz;
 8000352:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <clock_init+0xe4>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a1e      	ldr	r2, [pc, #120]	; (80003d0 <clock_init+0xe4>)
 8000358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800035c:	6313      	str	r3, [r2, #48]	; 0x30

		RCC->PLL2DIVR|=(10ul<<0); //mul by 11; pll2=132Mhz;
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <clock_init+0xe4>)
 8000360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000362:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <clock_init+0xe4>)
 8000364:	f043 030a 	orr.w	r3, r3, #10
 8000368:	6393      	str	r3, [r2, #56]	; 0x38
		RCC->PLL2DIVR|=(1ul<<9); //pll2_q_clk=66mhz;
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <clock_init+0xe4>)
 800036c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800036e:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <clock_init+0xe4>)
 8000370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000374:	6393      	str	r3, [r2, #56]	; 0x38

		//sws select pll_1_r;
		RCC->CFGR|=(3ul<<3);
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <clock_init+0xe4>)
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <clock_init+0xe4>)
 800037c:	f043 0318 	orr.w	r3, r3, #24
 8000380:	6113      	str	r3, [r2, #16]

		//RCC->SRDCCIPR&=~(3ul<<16);
		//RCC->SRDCCIPR|=(2ul<<16);

		RCC->CR|=RCC_CR_PLL1ON;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <clock_init+0xe4>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <clock_init+0xe4>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<25))){
 800038e:	bf00      	nop
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <clock_init+0xe4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <clock_init+0xa4>
		}

		RCC->CR|=RCC_CR_PLL2ON;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <clock_init+0xe4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <clock_init+0xe4>)
 80003a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003a6:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR&(1<<27))){
 80003a8:	bf00      	nop
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <clock_init+0xe4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f9      	beq.n	80003aa <clock_init+0xbe>
		}

		while(!(RCC->CR&(1<<14))){
 80003b6:	bf00      	nop
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <clock_init+0xe4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0f9      	beq.n	80003b8 <clock_init+0xcc>
			//x=5;
		//}
		//RCC->CR|=RCC_CR_PLL3ON;
		//pll1_p_ck

}
 80003c4:	bf00      	nop
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	58024400 	.word	0x58024400

080003d4 <pa0_adc_init>:
void pa0_adc_init(void){
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	/** configure the adc gpio pin **/

	/* enable  clock access to gpioA*/
	RCC->AHB4ENR|=RCC_AHB4ENR_GPIOAEN;
 80003d8:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <pa0_adc_init+0xfc>)
 80003da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003de:	4a3c      	ldr	r2, [pc, #240]	; (80004d0 <pa0_adc_init+0xfc>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	/*set PA0 to analog mode*/
	GPIOA->MODER|=(3ul<<0);
 80003e8:	4b3a      	ldr	r3, [pc, #232]	; (80004d4 <pa0_adc_init+0x100>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a39      	ldr	r2, [pc, #228]	; (80004d4 <pa0_adc_init+0x100>)
 80003ee:	f043 0303 	orr.w	r3, r3, #3
 80003f2:	6013      	str	r3, [r2, #0]
	/** configure the adc module **/

	/* enable  clock access to adc*/
	RCC->AHB1ENR|=RCC_AHB1ENR_ADC12EN;
 80003f4:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <pa0_adc_init+0xfc>)
 80003f6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80003fa:	4a35      	ldr	r2, [pc, #212]	; (80004d0 <pa0_adc_init+0xfc>)
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	/*conversion sequence start*/
	ADC1->SQR1|=16ul<<6;
 8000404:	4b34      	ldr	r3, [pc, #208]	; (80004d8 <pa0_adc_init+0x104>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a33      	ldr	r2, [pc, #204]	; (80004d8 <pa0_adc_init+0x104>)
 800040a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
	/*conversion sequence length*/
	ADC1->SQR1|=0ul<<0;
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <pa0_adc_init+0x104>)
 8000412:	4a31      	ldr	r2, [pc, #196]	; (80004d8 <pa0_adc_init+0x104>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	6313      	str	r3, [r2, #48]	; 0x30

	/*adc module enable*/
	ADC1->CR&=~ADC_CR_ADCAL;
 8000418:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <pa0_adc_init+0x104>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a2e      	ldr	r2, [pc, #184]	; (80004d8 <pa0_adc_init+0x104>)
 800041e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000422:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_JADSTART;
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <pa0_adc_init+0x104>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <pa0_adc_init+0x104>)
 800042a:	f023 0308 	bic.w	r3, r3, #8
 800042e:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADSTART;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <pa0_adc_init+0x104>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a28      	ldr	r2, [pc, #160]	; (80004d8 <pa0_adc_init+0x104>)
 8000436:	f023 0304 	bic.w	r3, r3, #4
 800043a:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADSTP;
 800043c:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <pa0_adc_init+0x104>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a25      	ldr	r2, [pc, #148]	; (80004d8 <pa0_adc_init+0x104>)
 8000442:	f023 0310 	bic.w	r3, r3, #16
 8000446:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADDIS;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <pa0_adc_init+0x104>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a22      	ldr	r2, [pc, #136]	; (80004d8 <pa0_adc_init+0x104>)
 800044e:	f023 0302 	bic.w	r3, r3, #2
 8000452:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADEN;
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <pa0_adc_init+0x104>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <pa0_adc_init+0x104>)
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_DEEPPWD;// enabling adc
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <pa0_adc_init+0x104>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <pa0_adc_init+0x104>)
 8000466:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800046a:	6093      	str	r3, [r2, #8]
	ADC1->CR|=ADC_CR_ADVREGEN;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <pa0_adc_init+0x104>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <pa0_adc_init+0x104>)
 8000472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000476:	6093      	str	r3, [r2, #8]
	ADC12_COMMON->CCR|=11ul<<18;
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <pa0_adc_init+0x108>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <pa0_adc_init+0x108>)
 800047e:	f443 1330 	orr.w	r3, r3, #2883584	; 0x2c0000
 8000482:	6093      	str	r3, [r2, #8]
	ADC1->PCSEL|=ADC_PCSEL_PCSEL_16;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <pa0_adc_init+0x104>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <pa0_adc_init+0x104>)
 800048a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800048e:	61d3      	str	r3, [r2, #28]
	ADC1->CFGR&=~(5UL<<2);// 16 BIT MODE
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <pa0_adc_init+0x104>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <pa0_adc_init+0x104>)
 8000496:	f023 0314 	bic.w	r3, r3, #20
 800049a:	60d3      	str	r3, [r2, #12]
	//ADC1->CFGR|=(5ul<<2);
	ADC1->SMPR1|=(5UL<<18);//SAMPLING 810.5 ADC CYCLES
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <pa0_adc_init+0x104>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <pa0_adc_init+0x104>)
 80004a2:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80004a6:	6153      	str	r3, [r2, #20]

	//ADC12_COMMON->CCR|=(ADC_CCR_CKMODE_0|ADC_CCR_CKMODE_1); // adc_sclk/4 (Synchronous clock mode)
	ADC1->DIFSEL&=~ADC_DIFSEL_DIFSEL_16;// single channel adc
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <pa0_adc_init+0x104>)
 80004aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <pa0_adc_init+0x104>)
 80004b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	ADC1->CR|=ADC_CR_ADEN; //enable adc
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <pa0_adc_init+0x104>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <pa0_adc_init+0x104>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6093      	str	r3, [r2, #8]

	//ovsr=1024 ovss[3:0]=1010
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	58024400 	.word	0x58024400
 80004d4:	58020000 	.word	0x58020000
 80004d8:	40022000 	.word	0x40022000
 80004dc:	40022300 	.word	0x40022300

080004e0 <start_conversion>:
void start_conversion(void){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	/*start adc conversion*/
	ADC1->CR|=ADC_CR_ADSTART;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <start_conversion+0x1c>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <start_conversion+0x1c>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6093      	str	r3, [r2, #8]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40022000 	.word	0x40022000

08000500 <adc_read>:

uint32_t adc_read(void){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	/* wait for conversion to complete*/
	//ADC1->CFGR|=ADC_CFGR_CONT;
	//while(!(ADC1->ISR&(1ul<<1))){}
	//while(!(ADC1->ISR&(1ul<<0))){};
	while(!(ADC1->ISR &(1ul<<2))) {
 8000504:	e003      	b.n	800050e <adc_read+0xe>
		sensor=ADC1->ISR;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <adc_read+0x28>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <adc_read+0x2c>)
 800050c:	6013      	str	r3, [r2, #0]
	while(!(ADC1->ISR &(1ul<<2))) {
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <adc_read+0x28>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f5      	beq.n	8000506 <adc_read+0x6>
	}
	//while(!(ADC1->ISR&(1ul<<3))){
		//;
	//}
	/*read converted result*/
	return (ADC1->DR);
 800051a:	4b03      	ldr	r3, [pc, #12]	; (8000528 <adc_read+0x28>)
 800051c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800051e:	4618      	mov	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40022000 	.word	0x40022000
 800052c:	2400001c 	.word	0x2400001c

08000530 <main>:


uint32_t sensor_value;
int data;
int main(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	data=0;
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
	clock_init();
 800053c:	f7ff fed6 	bl	80002ec <clock_init>
	data=1;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0x50>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
	pa0_adc_init();
 8000546:	f7ff ff45 	bl	80003d4 <pa0_adc_init>
	data=2;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <main+0x50>)
 800054c:	2202      	movs	r2, #2
 800054e:	601a      	str	r2, [r3, #0]
	//calibrate the adc
	//timer init for adc start with interup routine
	//dma of two blocks
	//fft of the first address
	while(1){
		start_conversion();
 8000550:	f7ff ffc6 	bl	80004e0 <start_conversion>
		data=3;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <main+0x50>)
 8000556:	2203      	movs	r2, #3
 8000558:	601a      	str	r2, [r3, #0]
		sensor_value=adc_read();
 800055a:	f7ff ffd1 	bl	8000500 <adc_read>
 800055e:	4603      	mov	r3, r0
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <main+0x54>)
 8000562:	6013      	str	r3, [r2, #0]
		data=4;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <main+0x50>)
 8000566:	2204      	movs	r2, #4
 8000568:	601a      	str	r2, [r3, #0]
		for(int i=0;i<100;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e002      	b.n	8000576 <main+0x46>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b63      	cmp	r3, #99	; 0x63
 800057a:	ddf9      	ble.n	8000570 <main+0x40>
		start_conversion();
 800057c:	e7e8      	b.n	8000550 <main+0x20>
 800057e:	bf00      	nop
 8000580:	24000024 	.word	0x24000024
 8000584:	24000020 	.word	0x24000020

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	; (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 f811 	bl	80005dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff ffb9 	bl	8000530 <main>

080005be <LoopForever>:

LoopForever:
  b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80005c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005c8:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80005cc:	08000644 	.word	0x08000644
  ldr r2, =_sbss
 80005d0:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80005d4:	24000028 	.word	0x24000028

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <__libc_init_array>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	4d0d      	ldr	r5, [pc, #52]	; (8000614 <__libc_init_array+0x38>)
 80005e0:	4c0d      	ldr	r4, [pc, #52]	; (8000618 <__libc_init_array+0x3c>)
 80005e2:	1b64      	subs	r4, r4, r5
 80005e4:	10a4      	asrs	r4, r4, #2
 80005e6:	2600      	movs	r6, #0
 80005e8:	42a6      	cmp	r6, r4
 80005ea:	d109      	bne.n	8000600 <__libc_init_array+0x24>
 80005ec:	4d0b      	ldr	r5, [pc, #44]	; (800061c <__libc_init_array+0x40>)
 80005ee:	4c0c      	ldr	r4, [pc, #48]	; (8000620 <__libc_init_array+0x44>)
 80005f0:	f000 f818 	bl	8000624 <_init>
 80005f4:	1b64      	subs	r4, r4, r5
 80005f6:	10a4      	asrs	r4, r4, #2
 80005f8:	2600      	movs	r6, #0
 80005fa:	42a6      	cmp	r6, r4
 80005fc:	d105      	bne.n	800060a <__libc_init_array+0x2e>
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f855 3b04 	ldr.w	r3, [r5], #4
 8000604:	4798      	blx	r3
 8000606:	3601      	adds	r6, #1
 8000608:	e7ee      	b.n	80005e8 <__libc_init_array+0xc>
 800060a:	f855 3b04 	ldr.w	r3, [r5], #4
 800060e:	4798      	blx	r3
 8000610:	3601      	adds	r6, #1
 8000612:	e7f2      	b.n	80005fa <__libc_init_array+0x1e>
 8000614:	0800063c 	.word	0x0800063c
 8000618:	0800063c 	.word	0x0800063c
 800061c:	0800063c 	.word	0x0800063c
 8000620:	08000640 	.word	0x08000640

08000624 <_init>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr

08000630 <_fini>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr
