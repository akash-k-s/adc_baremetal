
adc_bare_metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000668  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  24000000  08000668  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400002c  08000668  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY
  9 .debug_info   000008c5  00000000  00000000  00010696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000019d  00000000  00000000  00010f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000068  00000000  00000000  000110f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000050  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020ef3  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000005a6  00000000  00000000  000320a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c027b  00000000  00000000  00032649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000f28c4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000dc  00000000  00000000  000f2914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000000 	.word	0x24000000
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08000648 	.word	0x08000648

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000004 	.word	0x24000004
 80002e8:	08000648 	.word	0x08000648

080002ec <clock_init>:
// analog pin pa3->ahb1->adc_12_inp15;
//PA0->ADC1_INP16,
#define eoc (1ul<<2);
uint32_t sensor;
uint32_t x;
void clock_init(void){
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	//RCC->CR|=RCC_CR_HSI48ON;
		//hse on and wait for it to satabilize;
		//hse 24mhz;

		RCC->CR|=RCC_CR_HSEON; //
 80002f0:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <clock_init+0x104>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a3e      	ldr	r2, [pc, #248]	; (80003f0 <clock_init+0x104>)
 80002f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002fa:	6013      	str	r3, [r2, #0]
		x=0;
 80002fc:	4b3d      	ldr	r3, [pc, #244]	; (80003f4 <clock_init+0x108>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
		while (!(RCC->CR & (1<<17))){
 8000302:	e002      	b.n	800030a <clock_init+0x1e>
			x=1;
 8000304:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <clock_init+0x108>)
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
		while (!(RCC->CR & (1<<17))){
 800030a:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <clock_init+0x104>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f6      	beq.n	8000304 <clock_init+0x18>
		}

		//pll mux  hse clock is selected.
		RCC->PLLCKSELR|=(2ul<<0);
 8000316:	4b36      	ldr	r3, [pc, #216]	; (80003f0 <clock_init+0x104>)
 8000318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800031a:	4a35      	ldr	r2, [pc, #212]	; (80003f0 <clock_init+0x104>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	6293      	str	r3, [r2, #40]	; 0x28
		//pll 1 is  getting 8mhz
		RCC->PLLCKSELR|=(3ul<<4);
 8000322:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <clock_init+0x104>)
 8000324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000326:	4a32      	ldr	r2, [pc, #200]	; (80003f0 <clock_init+0x104>)
 8000328:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800032c:	6293      	str	r3, [r2, #40]	; 0x28
		//pll 2,3 is getting 12mHz
		RCC->PLLCKSELR|=(2ul<<12); // pll 2
 800032e:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <clock_init+0x104>)
 8000330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000332:	4a2f      	ldr	r2, [pc, #188]	; (80003f0 <clock_init+0x104>)
 8000334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000338:	6293      	str	r3, [r2, #40]	; 0x28
		//RCC->PLLCKSELR|=(2ul<<20); //pll 3
		//pll1_p_ck for sys_ck, pll1_r_ck for traceportc
		RCC->PLL1DIVR|=(69ul<<0); // mul by 70; pll1= 420Mhz;
 800033a:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <clock_init+0x104>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a2c      	ldr	r2, [pc, #176]	; (80003f0 <clock_init+0x104>)
 8000340:	f043 0345 	orr.w	r3, r3, #69	; 0x45
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->PLL1DIVR|=(1ul<<24); // pll1_r_clk =240mhz;
 8000346:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <clock_init+0x104>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a29      	ldr	r2, [pc, #164]	; (80003f0 <clock_init+0x104>)
 800034c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->PLL1DIVR|=1ul<<9; //pll1_p_clk =240mhz;
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <clock_init+0x104>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <clock_init+0x104>)
 8000358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->PLL1DIVR|=1ul<<16; // pll1_q_clk=240mhz;
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <clock_init+0x104>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <clock_init+0x104>)
 8000364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000368:	6313      	str	r3, [r2, #48]	; 0x30

		RCC->PLL2DIVR|=(10ul<<0); //mul by 11; pll2=132Mhz;
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <clock_init+0x104>)
 800036c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800036e:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <clock_init+0x104>)
 8000370:	f043 030a 	orr.w	r3, r3, #10
 8000374:	6393      	str	r3, [r2, #56]	; 0x38
		RCC->PLL2DIVR|=(1ul<<9); //pll2_q_clk=66mhz;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <clock_init+0x104>)
 8000378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800037a:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <clock_init+0x104>)
 800037c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000380:	6393      	str	r3, [r2, #56]	; 0x38

		//sws select pll_1_r;
		RCC->CFGR|=(3ul<<3);
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <clock_init+0x104>)
 8000384:	691b      	ldr	r3, [r3, #16]
 8000386:	4a1a      	ldr	r2, [pc, #104]	; (80003f0 <clock_init+0x104>)
 8000388:	f043 0318 	orr.w	r3, r3, #24
 800038c:	6113      	str	r3, [r2, #16]

		//RCC->SRDCCIPR&=~(3ul<<16);
		//RCC->SRDCCIPR|=(2ul<<16);

		RCC->CR|=RCC_CR_PLL1ON;
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <clock_init+0x104>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <clock_init+0x104>)
 8000394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000398:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<25))){
 800039a:	e002      	b.n	80003a2 <clock_init+0xb6>
			x=2;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <clock_init+0x108>)
 800039e:	2202      	movs	r2, #2
 80003a0:	601a      	str	r2, [r3, #0]
		while (!(RCC->CR & (1<<25))){
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <clock_init+0x104>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f6      	beq.n	800039c <clock_init+0xb0>
		}

		RCC->CR|=RCC_CR_PLL2ON;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <clock_init+0x104>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <clock_init+0x104>)
 80003b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003b8:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR&(1<<27))){
 80003ba:	e002      	b.n	80003c2 <clock_init+0xd6>
			x=3;
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <clock_init+0x108>)
 80003be:	2203      	movs	r2, #3
 80003c0:	601a      	str	r2, [r3, #0]
		while(!(RCC->CR&(1<<27))){
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <clock_init+0x104>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f6      	beq.n	80003bc <clock_init+0xd0>
		}

		while(!(RCC->CR&(1<<14))){
 80003ce:	e002      	b.n	80003d6 <clock_init+0xea>
			x=4;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <clock_init+0x108>)
 80003d2:	2204      	movs	r2, #4
 80003d4:	601a      	str	r2, [r3, #0]
		while(!(RCC->CR&(1<<14))){
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <clock_init+0x104>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f6      	beq.n	80003d0 <clock_init+0xe4>
			//x=5;
		//}
		//RCC->CR|=RCC_CR_PLL3ON;
		//pll1_p_ck

}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	58024400 	.word	0x58024400
 80003f4:	24000020 	.word	0x24000020

080003f8 <pa0_adc_init>:
void pa0_adc_init(void){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	/** configure the adc gpio pin **/

	/* enable  clock access to gpioA*/
	RCC->AHB4ENR|=RCC_AHB4ENR_GPIOAEN;
 80003fc:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <pa0_adc_init+0xfc>)
 80003fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000402:	4a3c      	ldr	r2, [pc, #240]	; (80004f4 <pa0_adc_init+0xfc>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	/*set PA0 to analog mode*/
	GPIOA->MODER|=(3ul<<0);
 800040c:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <pa0_adc_init+0x100>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a39      	ldr	r2, [pc, #228]	; (80004f8 <pa0_adc_init+0x100>)
 8000412:	f043 0303 	orr.w	r3, r3, #3
 8000416:	6013      	str	r3, [r2, #0]
	/** configure the adc module **/

	/* enable  clock access to adc*/
	RCC->AHB1ENR|=RCC_AHB1ENR_ADC12EN;
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <pa0_adc_init+0xfc>)
 800041a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800041e:	4a35      	ldr	r2, [pc, #212]	; (80004f4 <pa0_adc_init+0xfc>)
 8000420:	f043 0320 	orr.w	r3, r3, #32
 8000424:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	/*conversion sequence start*/
	ADC1->SQR1|=16ul<<6;
 8000428:	4b34      	ldr	r3, [pc, #208]	; (80004fc <pa0_adc_init+0x104>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a33      	ldr	r2, [pc, #204]	; (80004fc <pa0_adc_init+0x104>)
 800042e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
	/*conversion sequence length*/
	ADC1->SQR1|=0ul<<0;
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <pa0_adc_init+0x104>)
 8000436:	4a31      	ldr	r2, [pc, #196]	; (80004fc <pa0_adc_init+0x104>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	6313      	str	r3, [r2, #48]	; 0x30

	/*adc module enable*/
	ADC1->CR&=~ADC_CR_ADCAL;
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <pa0_adc_init+0x104>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a2e      	ldr	r2, [pc, #184]	; (80004fc <pa0_adc_init+0x104>)
 8000442:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000446:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_JADSTART;
 8000448:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <pa0_adc_init+0x104>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a2b      	ldr	r2, [pc, #172]	; (80004fc <pa0_adc_init+0x104>)
 800044e:	f023 0308 	bic.w	r3, r3, #8
 8000452:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADSTART;
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <pa0_adc_init+0x104>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a28      	ldr	r2, [pc, #160]	; (80004fc <pa0_adc_init+0x104>)
 800045a:	f023 0304 	bic.w	r3, r3, #4
 800045e:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADSTP;
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <pa0_adc_init+0x104>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a25      	ldr	r2, [pc, #148]	; (80004fc <pa0_adc_init+0x104>)
 8000466:	f023 0310 	bic.w	r3, r3, #16
 800046a:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADDIS;
 800046c:	4b23      	ldr	r3, [pc, #140]	; (80004fc <pa0_adc_init+0x104>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a22      	ldr	r2, [pc, #136]	; (80004fc <pa0_adc_init+0x104>)
 8000472:	f023 0302 	bic.w	r3, r3, #2
 8000476:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_ADEN;
 8000478:	4b20      	ldr	r3, [pc, #128]	; (80004fc <pa0_adc_init+0x104>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <pa0_adc_init+0x104>)
 800047e:	f023 0301 	bic.w	r3, r3, #1
 8000482:	6093      	str	r3, [r2, #8]
	ADC1->CR&=~ADC_CR_DEEPPWD;// enabling adc
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <pa0_adc_init+0x104>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <pa0_adc_init+0x104>)
 800048a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800048e:	6093      	str	r3, [r2, #8]
	ADC1->CR|=ADC_CR_ADVREGEN;
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <pa0_adc_init+0x104>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a19      	ldr	r2, [pc, #100]	; (80004fc <pa0_adc_init+0x104>)
 8000496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049a:	6093      	str	r3, [r2, #8]
	ADC12_COMMON->CCR|=11ul<<18;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <pa0_adc_init+0x108>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a17      	ldr	r2, [pc, #92]	; (8000500 <pa0_adc_init+0x108>)
 80004a2:	f443 1330 	orr.w	r3, r3, #2883584	; 0x2c0000
 80004a6:	6093      	str	r3, [r2, #8]
	ADC1->PCSEL|=ADC_PCSEL_PCSEL_16;
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <pa0_adc_init+0x104>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a13      	ldr	r2, [pc, #76]	; (80004fc <pa0_adc_init+0x104>)
 80004ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b2:	61d3      	str	r3, [r2, #28]
	ADC1->CFGR&=~(5UL<<2);// 16 BIT MODE
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <pa0_adc_init+0x104>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	4a10      	ldr	r2, [pc, #64]	; (80004fc <pa0_adc_init+0x104>)
 80004ba:	f023 0314 	bic.w	r3, r3, #20
 80004be:	60d3      	str	r3, [r2, #12]
	//ADC1->CFGR|=(5ul<<2);
	ADC1->SMPR1|=(5UL<<18);//SAMPLING 810.5 ADC CYCLES
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <pa0_adc_init+0x104>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <pa0_adc_init+0x104>)
 80004c6:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80004ca:	6153      	str	r3, [r2, #20]

	//ADC12_COMMON->CCR|=(ADC_CCR_CKMODE_0|ADC_CCR_CKMODE_1); // adc_sclk/4 (Synchronous clock mode)
	ADC1->DIFSEL&=~ADC_DIFSEL_DIFSEL_16;// single channel adc
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <pa0_adc_init+0x104>)
 80004ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <pa0_adc_init+0x104>)
 80004d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	ADC1->CR|=ADC_CR_ADEN; //enable adc
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <pa0_adc_init+0x104>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <pa0_adc_init+0x104>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6093      	str	r3, [r2, #8]

	//ovsr=1024 ovss[3:0]=1010
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	58024400 	.word	0x58024400
 80004f8:	58020000 	.word	0x58020000
 80004fc:	40022000 	.word	0x40022000
 8000500:	40022300 	.word	0x40022300

08000504 <start_conversion>:
void start_conversion(void){
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	/*start adc conversion*/
	ADC1->CR|=ADC_CR_ADSTART;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <start_conversion+0x1c>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <start_conversion+0x1c>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6093      	str	r3, [r2, #8]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40022000 	.word	0x40022000

08000524 <adc_read>:

uint32_t adc_read(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	/* wait for conversion to complete*/
	//ADC1->CFGR|=ADC_CFGR_CONT;
	//while(!(ADC1->ISR&(1ul<<1))){}
	//while(!(ADC1->ISR&(1ul<<0))){};
	while(!(ADC1->ISR &(1ul<<2))) {
 8000528:	e003      	b.n	8000532 <adc_read+0xe>
		sensor=ADC1->ISR;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <adc_read+0x28>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <adc_read+0x2c>)
 8000530:	6013      	str	r3, [r2, #0]
	while(!(ADC1->ISR &(1ul<<2))) {
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <adc_read+0x28>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f5      	beq.n	800052a <adc_read+0x6>
	}
	//while(!(ADC1->ISR&(1ul<<3))){
		//;
	//}
	/*read converted result*/
	return (ADC1->DR);
 800053e:	4b03      	ldr	r3, [pc, #12]	; (800054c <adc_read+0x28>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40022000 	.word	0x40022000
 8000550:	2400001c 	.word	0x2400001c

08000554 <main>:


uint32_t sensor_value;
int data;
int main(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	data=0;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <main+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
	clock_init();
 8000560:	f7ff fec4 	bl	80002ec <clock_init>
	data=1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <main+0x50>)
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
	pa0_adc_init();
 800056a:	f7ff ff45 	bl	80003f8 <pa0_adc_init>
	data=2;
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <main+0x50>)
 8000570:	2202      	movs	r2, #2
 8000572:	601a      	str	r2, [r3, #0]
	//calibrate the adc
	//timer init for adc start with interup routine
	//dma of two blocks
	//fft of the first address
	while(1){
		start_conversion();
 8000574:	f7ff ffc6 	bl	8000504 <start_conversion>
		data=3;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <main+0x50>)
 800057a:	2203      	movs	r2, #3
 800057c:	601a      	str	r2, [r3, #0]
		sensor_value=adc_read();
 800057e:	f7ff ffd1 	bl	8000524 <adc_read>
 8000582:	4603      	mov	r3, r0
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <main+0x54>)
 8000586:	6013      	str	r3, [r2, #0]
		data=4;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <main+0x50>)
 800058a:	2204      	movs	r2, #4
 800058c:	601a      	str	r2, [r3, #0]
		for(int i=0;i<100;i++){
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e002      	b.n	800059a <main+0x46>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b63      	cmp	r3, #99	; 0x63
 800059e:	ddf9      	ble.n	8000594 <main+0x40>
		start_conversion();
 80005a0:	e7e8      	b.n	8000574 <main+0x20>
 80005a2:	bf00      	nop
 80005a4:	24000028 	.word	0x24000028
 80005a8:	24000024 	.word	0x24000024

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005da:	f000 f811 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff ffb9 	bl	8000554 <main>

080005e2 <LoopForever>:

LoopForever:
  b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80005e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005ec:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80005f0:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 80005f4:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80005f8:	2400002c 	.word	0x2400002c

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	4d0d      	ldr	r5, [pc, #52]	; (8000638 <__libc_init_array+0x38>)
 8000604:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000606:	1b64      	subs	r4, r4, r5
 8000608:	10a4      	asrs	r4, r4, #2
 800060a:	2600      	movs	r6, #0
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	4d0b      	ldr	r5, [pc, #44]	; (8000640 <__libc_init_array+0x40>)
 8000612:	4c0c      	ldr	r4, [pc, #48]	; (8000644 <__libc_init_array+0x44>)
 8000614:	f000 f818 	bl	8000648 <_init>
 8000618:	1b64      	subs	r4, r4, r5
 800061a:	10a4      	asrs	r4, r4, #2
 800061c:	2600      	movs	r6, #0
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
